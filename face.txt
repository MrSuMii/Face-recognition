import tkinter as tk
import cv2
from PIL import Image, ImageTk

# Load the pre-trained face detection model
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

class FaceDetectionApp:
    def __init__(self, window, window_title):
        self.window = window
        self.window.title(window_title)
        
        # OpenCV video capture
        self.cap = cv2.VideoCapture(0)
        
        # Create a canvas that can fit the video feed
        self.canvas = tk.Canvas(window, width=self.cap.get(cv2.CAP_PROP_FRAME_WIDTH), 
                                height=self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        self.canvas.pack()
        
        # Button to quit
        self.quit_button = tk.Button(window, text="Quit", command=self.quit)
        self.quit_button.pack(side=tk.BOTTOM)
        
        self.delay = 10
        self.update()

    def update(self):
        ret, frame = self.cap.read()
        if ret:
            # Convert the frame to RGB color
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            # Detect faces in the frame
            faces = face_cascade.detectMultiScale(rgb_frame, scaleFactor=1.1, minNeighbors=4)
            for (x, y, w, h) in faces:
                cv2.rectangle(rgb_frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
            
            # Convert frame to ImageTk format
            self.photo = ImageTk.PhotoImage(image=Image.fromarray(rgb_frame))
            self.canvas.create_image(0, 0, image=self.photo, anchor=tk.NW)
        
        self.window.after(self.delay, self.update)
    
    def quit(self):
        self.cap.release()
        self.window.destroy()

# Create a Tkinter window
root = tk.Tk()
app = FaceDetectionApp(root, "Face Detection App")

root.mainloop()
